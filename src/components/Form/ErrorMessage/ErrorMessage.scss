$respond-to-no-mediaqueries-fallback: phone;
$respond-to-fallback-class: lt-ie9;
$respond-to-breakpoints: (
  large "screen and (max-width: 1090px)",
  medium "screen and (max-width: 821px)",
  small "screen and (max-width: 649px)",
  half "screen and (max-width: 500px)"
);
@mixin respond-to($medias...) {
  $breakpoints-length: length($respond-to-breakpoints);

  @each $media in $medias {
    $had-a-hit: false;

    @for $i from 1 through $breakpoints-length {
      $breakpoint: nth($respond-to-breakpoints, $i);
      @if $media == nth($breakpoint, 1) {
        $definition: nth($breakpoint, 2);
        $had-a-hit: true;
        @media #{$definition} {
          @content;
        }
      }
    }

    @if $media == $respond-to-no-mediaqueries-fallback {
      .#{$respond-to-fallback-class} & {
        @content;
      }
    }

    @if $had-a-hit == false {
      @warn "Media #{media} not found!";
    }
  }
}

.form-item-error {
  display: flex;
  align-items: center;
  padding-left: 10px;
  color: #ff0000;
  font-size: 14px;
  margin-left: 20px;
  border-radius: 10px;
  min-width: 300px;
  margin-top: 6px;
  max-width: 50%;
  &.size-top {
    margin-top: 20px;
  }
  &.size-bottom {
    margin-bottom: 20px;
  }
  &--UNDER-LABEL {
    padding-left: 0;
    margin-left: 0;
    max-width: 100%;
  }
  @include respond-to(small) {
    margin-left: 0;
    padding-left: 0;
  }
}
